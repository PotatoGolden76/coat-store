        -:    0:Source:/mnt/c/Users/rober/Desktop/University/Repos/A5-6-OOP/Headers/DynamicArray.h
        -:    0:Graph:/mnt/c/Users/rober/Desktop/University/Repos/A5-6-OOP/cmake-build-debug-coverage/CMakeFiles/A5_6_OOP.dir/Sources/repo.cpp.gcno
        -:    0:Data:/mnt/c/Users/rober/Desktop/University/Repos/A5-6-OOP/cmake-build-debug-coverage/CMakeFiles/A5_6_OOP.dir/Sources/repo.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <cstdlib>
        -:    4:
        -:    5:template<class element>
        -:    6:class DynamicArray {
        -:    7:public:
        -:    8:    DynamicArray(); // constructor
        -:    9:    DynamicArray(const DynamicArray &a); // copy constructor
        -:   10:    ~DynamicArray(); // destructor
        -:   11:    DynamicArray &operator=(const DynamicArray &a); // assignment operator
        -:   12:
        -:   13:    element &operator[](unsigned int index); // get array item
        -:   14:    void add(const element &item); // Add item to the end of array
        -:   15:
        -:   16:    unsigned int get_size(); // get size of array (elements)
        -:   17:    void clear(); // clear array
        -:   18:    void remove(unsigned int pos); // delete array item
        -:   19:    void *get_arr(); // get void* pointer to array data
        -:   20:
        -:   21:private:
        -:   22:    element *array; // pointer for array's memory
        -:   23:    unsigned int size; // current element
        -:   24:    unsigned int capacity; // actual size of allocated memory
        -:   25:
        -:   26:    const static unsigned int default_capacity = 1;
        -:   27:};
        -:   28:
        -:   29:template<class element>
        -:   30:DynamicArray<element>::DynamicArray() : size{0}, capacity{default_capacity} {
        -:   31:    this->array = new element[this->capacity];
        -:   32:}
        -:   33:
        -:   34:template<class element>
        -:   35:DynamicArray<element>::DynamicArray(const DynamicArray &a) {
        -:   36:    this->size = a.size;
        -:   37:    this->capacity = a.capacity;
        -:   38:    this->array = new element[this->capacity];
        -:   39:    for (int i = 0; i < this->size; i++)
        -:   40:        this->array[i] = a.array[i];
        -:   41:}
        -:   42:
        -:   43:template<class element>
        -:   44:DynamicArray<element>::~DynamicArray() {
        -:   45:    delete[] this->array;
        -:   46:}
        -:   47:
        -:   48:template<class element>
        -:   49:DynamicArray<element> &DynamicArray<element>::operator=(const DynamicArray &a) {
        -:   50:    if (this == &a)
        -:   51:        return *this;
        -:   52:
        -:   53:    this->capacity = a.capacity;
        -:   54:    this->size = a.size;
        -:   55:
        -:   56:    delete[] this->array;
        -:   57:    this->array = new element[this->capacity];
        -:   58:    for (int i = 0; i < this->size; i++)
        -:   59:        this->array[i] = a.array[i];
        -:   60:
        -:   61:    return *this;
        -:   62:}
        -:   63:
        -:   64:template<class element>
function _ZN12DynamicArrayI4CoatEixEj called 10 returned 100% blocks executed 100%
       10:   65:element &DynamicArray<element>::operator[](unsigned int index) {
       10:   66:    return this->array[index];
       10:   66-block  0
        -:   67:}
        -:   68:
        -:   69:template<class element>
function _ZN12DynamicArrayI4CoatE3addERKS0_ called 2 returned 100% blocks executed 68%
        2:   70:void DynamicArray<element>::add(const element &item) {
        2:   71:    this->size++;
        2:   72:    if (this->size >= this->capacity) {
        2:   72-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   73:        this->capacity *= 2;
       6*:   74:        element* new_ar = new element[this->capacity];
        2:   74-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   74-block  1
    %%%%%:   74-block  2
        2:   74-block  3
call    2 returned 2
        6:   74-block  4
branch  3 taken 4 (fallthrough)
branch  4 taken 2
        4:   74-block  5
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
        4:   74-block  6
    $$$$$:   74-block  7
    $$$$$:   74-block  8
call    8 never executed
    $$$$$:   74-block  9
branch  9 never executed
branch 10 never executed
    $$$$$:   74-block 10
    $$$$$:   74-block 11
    $$$$$:   74-block 12
call   11 never executed
        4:   75:        for(int i = 0; i < this->size; i++) {
        2:   75-block  0
        4:   75-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:   76:            new_ar[i] = this->array[i];
        2:   76-block  0
call    0 returned 2
        -:   77:        }
        4:   78:        delete[] this->array;
        2:   78-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   78-block  1
        4:   78-block  2
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        2:   78-block  3
call    4 returned 2
        2:   78-block  4
call    5 returned 2
        2:   79:        this->array = new_ar;
        2:   79-block  0
        -:   80:    }
        2:   81:    this->array[this->size - 1] = item;
        2:   81-block  0
call    0 returned 2
        2:   82:}
        -:   83:
        -:   84:template<class element>
function _ZN12DynamicArrayI4CoatE8get_sizeEv called 15 returned 100% blocks executed 100%
       15:   85:unsigned int DynamicArray<element>::get_size() {
       15:   86:    return this->size;
       15:   86-block  0
        -:   87:}
        -:   88:
        -:   89:template<class element>
        -:   90:void DynamicArray<element>::clear() {
        -:   91:    this->size = 0;
        -:   92:    this->capacity = default_capacity;
        -:   93:    delete[] this->array;
        -:   94:    this->array = new element[default_capacity];
        -:   95:}
        -:   96:
        -:   97:template<class element>
function _ZN12DynamicArrayI4CoatE6removeEj called 2 returned 100% blocks executed 60%
        2:   98:void DynamicArray<element>::remove(unsigned int pos) {
        -:   99:    //delete this->array[pos];
       2*:  100:    for (unsigned int i = pos; i < this->size - 1; i++) {
        2:  100-block  0
        2:  100-block  1
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  101:        this->array[i] = this->array[i + 1];
    %%%%%:  101-block  0
call    0 never executed
        -:  102:    }
        2:  103:    this->size--;
        2:  104:}
        -:  105:
        -:  106:template<class element>
        -:  107:void *DynamicArray<element>::get_arr() {
        -:  108:    return this->array;
        -:  109:}
        -:  110:
        -:  111:
